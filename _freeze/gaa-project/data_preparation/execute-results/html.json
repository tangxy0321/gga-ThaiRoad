{
  "hash": "e6aac09188d77c7ef4010da745ebf075",
  "result": {
    "markdown": "---\ntitle: \"Data Preparation\"\nformat: \n  html:\n    code-fold: true\n    code-summary: \"Show code\"\nexecute:\n  eval: false\n  echo: true\n  freeze: auto\n  warning: false\ndate: \"2024-04-07\"\nauthor:\n  - Tan Jun Sheng Jackson\n---\n\n\n# 1. Loading required R packages\n\nThe R packages that we will be using to prepare our data are as follows:\n\n-   **lubridate:** To handle the date formatting\n\n-   **sf:** Import, manage and process vector-based geospatial data in R.\n\n-   **tidyverse:** a collection of packages for data science tasks\n\n-   **gridExtra:** For displaying plots in the same column/row.\n\n-   **tmap:** Provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\n-   **maptools:** Provides a set of tools for manipulating geographic data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(lubridate, sf, tidyverse, gridExtra, tmap, maptools)\n```\n:::\n\n\n# 2. Importing the datasets\n\nThe datasets that we will be using are as follow:\n\n::: panel-tabset\n## Thailand Road Accidents Dataset\n\nWe will first drop the rows that have NA in lon and lat, as they will be useless for our analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents <- read.csv(\"./data/thai_road_accident_2019_2022.csv\") %>% \n  drop_na(latitude) %>% \n  drop_na(longitude)\n```\n:::\n\n\nWe will then convert the dataframe to SF dataframe, with the EPSG code 4239 for Thailand.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_sf <- st_as_sf(accidents, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4239) %>%\n  st_transform(crs = 32648)\n```\n:::\n\n\n## Boundary of Thailand\n\nWe use ADM0_EN dataset as it is the boundary of the whole of Thailand.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_boundary <- st_read(dsn = \"./data/thai_adm_boundary\", \n                 layer = \"tha_admbnda_adm2_rtsd_20220121\") %>%\n                st_transform(crs = 32648) %>% \n                filter(ADM1_EN == \"Bangkok\") \nthai_boundary\n```\n:::\n\n\n## OSM Thailand Roads Dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_roads <- st_read(dsn = \"./data/thai_road_osm\", \n              layer = \"gis_osm_roads_free_1\") %>%\n              filter(fclass %in% c(\"motorway\",\"primary\",\"secondary\",\"tertiary\")) %>% \n              st_transform(crs = 32648) %>%\n              dplyr::select(-ref,-name)\n```\n:::\n\n:::\n\n# **3. Datasets Overview**\n\nGeneral overview of the dataset\n\n::: panel-tabset\n## Thailand Road Accidents\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(accidents_sf)\n```\n:::\n\n\n## Boundary of Bangkok\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(thai_boundary)\nplot(st_geometry(thai_boundary))\n```\n:::\n\n\n## OSM Bangkok Roads\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(thai_roads)\n```\n:::\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"view\")\ntm_shape(accidents_sf) +\n  tm_dots(\"province_en\")\ntmap_mode(\"plot\")\n```\n:::\n\n\nWe can use *`st_intersection()`* function on accidents_sf using the thai_boundary to restrict points to only Bangkok.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_thai_sf <- st_intersection(accidents_sf, thai_boundary)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_thai_sf\n```\n:::\n\n\n# 4. Simplifying Variables\n\nSome of the factor variables in the datasets have too many options, and most of them can be simplified into a few general categories. By doing this, it will ease our analysis process and also make the resulting output more comprehensible.\n\n## 4.1 Accident Cause Categories\n\nThe first one is the **presumed_cause** variable of the **accidents_sf** dataset, which we can split into 5 different categories, mainly Driver Factors, Traffic Violations, External Factors, Speeding (as it is the top leading cause of accidents), and Others. Looking at the existing categories:\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccident_categories <- unique(accidents_sf$presumed_cause)\naccident_categories\n```\n:::\n\n\nPutting them into 5 general categories:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndriver_factors <- accident_categories[c(1,3,6,9, 14, 21, 30, 44, 49, 50, 52:54)]\ntraffic_violations <- accident_categories[c(3:5, 7, 11:13, 16, 17, 19, 23:26, 29, 31, 35)]\nexternal_factors <- accident_categories[c(10, 15, 18, 20, 22, 27, 28, 32, 33, 34, 36:38, 39, 40:43, 45:48, 51)]\nspeeding <- accident_categories[c(2)]\n```\n:::\n\n\nUpdating the accident categories:\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_thai_sf$\"accident_categories\" <- as.factor(\n  ifelse(accidents_thai_sf$presumed_cause %in% driver_factors, 'driver_factors', \n  ifelse(accidents_thai_sf$presumed_cause %in% traffic_violations, 'traffic_violations', \n  ifelse(accidents_thai_sf$presumed_cause %in% external_factors, 'external_factors',\n  ifelse(accidents_thai_sf$presumed_cause %in% speeding, 'speeding',\n  'others')))))\n```\n:::\n\n\n## 4.2 Vehicle Categories\n\nNext up we will split the vehicle_type into 4 categories, two_wheeled, four_wheeled, heavy_duty, and others.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvehicle_categories <- unique(accidents_thai_sf$vehicle_type)\nvehicle_categories\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntwo_wheeled <- vehicle_categories[c(1,5,10,15)]\nfour_wheeled <- vehicle_categories[c(2,7,13)]\nheavy_duty <- vehicle_categories[c(3,6,8,9,11,14)]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_thai_sf$\"vehicle_categories\" <- as.factor(\n  ifelse(accidents_thai_sf$vehicle_type %in% two_wheeled, 'two_wheeled', \n  ifelse(accidents_thai_sf$vehicle_type %in% four_wheeled, 'four_wheeled', \n  ifelse(accidents_thai_sf$vehicle_type %in% heavy_duty, 'heavy_duty', \n  'others'))))\n```\n:::\n\n\n## 4.3 Weather Condition and Fatality\n\nWe can also simplify the weather_condition and number_of_fatalities column to whether there is a weather condition, and if the accident is fatal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_thai_sf <- accidents_thai_sf %>%\n  mutate(weather_condition = ifelse((weather_condition == \"clear\"), \"no\", \"yes\"),\n         fatal_accident = ifelse((number_of_fatalities >= 1), \"yes\", \"no\"))\n```\n:::\n\n\n## 4.4 Datetime\n\nThe exact datetime doesn't really provide us with much details. Let us split convert the incident_datetime into datetime object, then split it into year, day of the week, and hour of accident.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_thai_sf$incident_datetime <- as_datetime(\n  accidents_thai_sf$incident_datetime)\n\naccidents_thai_sf <- accidents_thai_sf %>%\n    mutate(year = year(incident_datetime),\n           weekday = wday(incident_datetime,\n                        label=TRUE,\n                        abbr=TRUE),\n         accident_hr = factor(hour(incident_datetime), levels = 0:23))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_thai_sf\n```\n:::\n\n\n# 5. Data Cleaning\n\n## 5.1 Variables Selection\n\nWith our necessary variables clean, let us drop the variables that we will not be using.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_thai_sf_clean <- accidents_thai_sf %>%\n  dplyr::select(c(19,27,14:16,37:42,36)) %>%\n  rename(district = ADM2_EN,\n         province = ADM1_EN)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(accidents_thai_sf_clean)\n```\n:::\n\n\n## 5.2 Invalid Geometries\n\n::: panel-tabset\n## Thailand Road Accidents\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- st_is_valid(accidents_thai_sf_clean,reason=TRUE)\n\n# Number of invalid geometries\nlength(which(test!= \"Valid Geometry\"))\n\n# Reason\ntest[which(test!= \"Valid Geometry\")]\n```\n:::\n\n\n## Boundary of Thailand\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- st_is_valid(thai_boundary,reason=TRUE)\n\n# Number of invalid geometries\nlength(which(test!= \"Valid Geometry\"))\n\n# Reason\ntest[which(test!= \"Valid Geometry\")]\n```\n:::\n\n\n## OSM Thailand Roads\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- st_is_valid(thai_roads ,reason=TRUE)\n\n# Number of invalid geometries\nlength(which(test!= \"Valid Geometry\"))\n\n# Reason\ntest[which(test!= \"Valid Geometry\")]\n```\n:::\n\n:::\n\nNo invalid geometries for any of the above dataset.\n\n## 5.3 Missing Values\n\n::: panel-tabset\n## Thailand Road Accidents\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_thai_sf_clean[rowSums(is.na(accidents_thai_sf_clean))!=0,]\n```\n:::\n\n\n## Boundary of Thailand\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_boundary[rowSums(is.na(thai_boundary))!=0,]\n```\n:::\n\n\n## OSM Thailand Roads\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_roads[rowSums(is.na(thai_roads))!=0,]\n```\n:::\n\n:::\n\nNo missing data as well.\n\n# 6. Adding new variables\n\n## 6.1 Loading layers dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_layer <- st_read(dsn = \"./data/thai_adm_boundary\", \n                 layer = \"tha_admbnda_adm2_rtsd_20220121\") %>%\n                st_transform(crs = 32648) %>%\n                filter(ADM1_EN == \"Bangkok\") \n```\n:::\n\n\n## 6.2 Appending the layer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad_province <- st_intersection(thai_roads,thai_layer) %>%\n  .[st_geometry_type(.) %in% c(\"LINESTRING\", \"MULTILINESTRING\"),] %>%\n  filter(ADM1_EN == \"Bangkok\") %>%\n  dplyr::select(1:8,11,28) %>%\n  rename(district = ADM2_EN)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(st_geometry_type(road_province$geometry))\n```\n:::\n\n\n# 7. Writing to RDS\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nwrite_rds(accidents_thai_sf_clean,\n          \"./data/rds/accidents_thai.rds\")\n\nwrite_rds(thai_boundary,\n          \"./data/rds/thai_boundary.rds\")\n\nwrite_rds(road_province,\n          \"./data/rds/thai_roads.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nread_rds(\"./data/rds/accidents_thai.rds\")\n```\n:::\n",
    "supporting": [
      "data_preparation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}