---
title: "Thailand_accidents"
format: 
  html:
    code-fold: true
    code-summary: "Show code"
execute: 
  eval: true
  echo: true
  freeze: auto
  warning: false
date: "`r Sys.Date()`"
---

# 2. Getting Started

## 2.1 Loading R packages

The R packages that we will be using in this exercise are as follows:

-   **lubridate:** To handle the date formatting

-   **sf:** Import, manage and process vector-based geospatial data in R.

-   **tidyverse:** a collection of packages for data science tasks

-   **gridExtra:** For displaying plots in the same column/row.

-   **tmap:** Provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.

-   **maptools:** Provides a set of tools for manipulating geographic data. In this take-home exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.

```{r}
pacman::p_load(sf, tidyverse, gridExtra, tmap, maptools)
```

## 2.2 Importing the datasets

The datasets that we will be using are as follow:

::: panel-tabset
## Thailand Road Accidents Dataset

We will first drop the rows that have NA in lon and lat, as they will be useless for our analysis.

```{r}
accidents <- read.csv("data/thai_road_accident_2019_2022.csv") %>% 
  drop_na(latitude) %>% 
  drop_na(longitude)
```

We will then convert the dataframe to SF dataframe, with the EPSG code 4239 for Thailand.

```{r}
accidents_sf <- st_as_sf(accidents, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 4239)
```

## Boundary of Thailand

We use ADM0_EN dataset as it is the boundary of the whole of Thailand.

```{r}
thai_boundary <- st_read(dsn = "data/thai_adm_boundary", 
                 layer = "tha_admbnda_adm0_rtsd_20220121") %>%
  st_transform(crs = 4239) %>%
  dplyr::select("ADM0_EN")

plot(st_geometry(thai_boundary))
```

## OSM Thailand Roads Dataset

```{r}

```

## Festive Period Accidents Dataset

```{r}

```
:::

# **3. Geospatial Data Wrangling**

## 3.1 Data Pre-processing - Thailand Road Accidents Dataset

Now let us first take a look at the points on the map.

```{r}
tmap_mode("plot")
tm_shape(accidents_sf) +
  tm_dots("province_en")
```

We can see from the map plot that there are points outside of Thailand, something we would like to exclude. We can do so by using *`st_intersection()`* function on accidents_sf using the thai_boundary.

```{r}
accidents_thai_sf <- st_intersection(accidents_sf, thai_boundary)
```

### 3.1.1 Simplifying Variables

Before we begin, we should have a look at the dataframe first.

```{r}
glimpse(accidents_thai_sf)
```

There are a few variables we can simplify, and a few variables we can extract from existing ones. Here are the following variables we can create or modify:

#### Accident Cause Categories

Splitting the presumed_cause variable into 5 different categories, mainly Driver Factors, Traffic Violations, External Factors, Speeding (as it is the top leading cause of accidents), and Others.

```{r}
accident_categories <- unique(accidents_sf$presumed_cause)
accident_categories
```

```{r}
driver_factors <- accident_categories[c(1,3,6,9, 14, 21, 30, 44, 49, 50, 52:54)]
traffic_violations <- accident_categories[c(3:5, 7, 11:13, 16, 17, 19, 23:26, 29, 31, 35)]
external_factors <- accident_categories[c(10, 15, 18, 20, 22, 27, 28, 32, 33, 34, 36:38, 39, 40:43, 45:48, 51)]
speeding <- accident_categories[c(2)]

accidents_thai_sf$"accident_categories" <- as.factor(
  ifelse(accidents_thai_sf$presumed_cause %in% driver_factors, 'driver_factors', 
  ifelse(accidents_thai_sf$presumed_cause %in% traffic_violations, 'traffic_violations', 
  ifelse(accidents_thai_sf$presumed_cause %in% external_factors, 'external_factors',
  ifelse(accidents_thai_sf$presumed_cause %in% speeding, 'speeding',
  'others')))))
```

Notes for Accident Categories:

16 and 35 same 41 Broken traffic sign \<- ป้ายจราจรชำรุด 42 Broken traffic directions divider \<- เส้นแบ่งทิศทางจราจรชำ

#### Vehicle Categories

Next up we will split the vehicle_type into 4 categories, two_wheeled, four_wheeled, heavy_duty, and others.

```{r}
vehicle_categories <- unique(accidents_thai_sf$vehicle_type)
vehicle_categories
```

```{r}
two_wheeled <- vehicle_categories[c(1,5,10,15)]
four_wheeled <- vehicle_categories[c(2,7,13)]
heavy_duty <- vehicle_categories[c(3,6,8,9,11,14)]

accidents_thai_sf$"vehicle_categories" <- as.factor(
  ifelse(accidents_thai_sf$vehicle_type %in% two_wheeled, 'two_wheeled', 
  ifelse(accidents_thai_sf$vehicle_type %in% four_wheeled, 'four_wheeled', 
  ifelse(accidents_thai_sf$vehicle_type %in% heavy_duty, 'heavy_duty', 
  'others'))))
```

#### Weather Condition and Fatality

We can also simplify the weather_condition and number_of_fatalities column to whether there is a weather condition, and if the accident is fatal.

```{r}
accidents_thai_sf <- accidents_thai_sf %>%
  mutate(weather_condition = ifelse((weather_condition == "clear"), "no", "yes"),
         fatal_accident = ifelse((number_of_fatalities >= 1), "yes", "no"))
```

#### Datetime

The exact datetime doesn't really provide us with much details. Let us split convert the incident_datetime into datetime object, then split it into day of the week and hour of accident.

```{r}
accidents_thai_sf$incident_datetime <- as_datetime(
  accidents_thai_sf$incident_datetime)

accidents_thai_sf <- accidents_thai_sf %>%
    mutate(weekday = wday(incident_datetime,
                        label=TRUE,
                        abbr=TRUE),
         accident_hr = factor(hour(incident_datetime), levels = 0:23))
```

### 3.1.2 Variables Selection

With our necessary variables clean, let us drop the variables that we will not be using.

```{r}
accidents_thai_sf_clean <- accidents_thai_sf %>%
  dplyr::select(c(5,14:16,19:22,18))
```

```{r}
glimpse(accidents_thai_sf_clean)
```

### 3.1.3 Invalid Geometries

### 3.1.4 Missing Values

### 3.1.5 Duplicated Points

## 3.2 Data Pre-processing - OSM Thailand Roads Dataset

# **4.** Exploratory Data Analysis

## 4.1 Basic Distribution

### 4.1.1 Accident Categories

```{r}
ggplot(accidents_thai_sf_clean, aes(x=accident_categories)) + 
  geom_bar() +
  labs(title = "Accidents by Cause Categories",
       x = "Accident Cause Categories",
       y = "Number of Accidents")
```

### 4.1.2 Vehicle Categories

```{r}
ggplot(accidents_thai_sf_clean, aes(x=vehicle_categories)) + 
  geom_bar() +
  labs(title = "Accidents by Vehicle Categories",
       x = "Vehicle Categories",
       y = "Number of Accidents")
```

### 4.1.3 Day of the Week

```{r}
ggplot(accidents_thai_sf_clean, aes(x=weekday)) + 
  geom_bar() +
  labs(title = "Accidents by Day of the Week",
       x = "Day of the Week",
       y = "Number of Accidents")
```

### 4.1.4 Accident Hour

```{r}
ggplot(accidents_thai_sf, aes(x=accident_hr)) +
  geom_bar() +
  labs(title = "Accidents by Start Hour",
       x = "Start Hour",
       y = "Number of Accidents")
```

### 4.1.5 Fatal Accident?

```{r}
ggplot(accidents_thai_sf_clean, aes(x = fatal_accident)) +
  geom_bar() +
  labs(title = "Fatal Accident?",
       x = "Number of Fatalities",
       y = "Number of Accidents")
```

### 

### 4.1.6 Bad Weather Condition?

```{r}
ggplot(accidents_thai_sf_clean, aes(x = weather_condition)) +
  geom_bar() +
  labs(title = "Weather Condition",
       x = "Weather Condition",
       y = "Number of Accidents")
```

## 4.2 What causes fatal accident?

### 4.2.1 Logistic Regression to find statistically significant variables

To find out which variable heavily influence whether an accident is fatal, we can make use of a Logistic Regression to check which one is statistically significant. We first need to create a temporary dataframe and drop the geometry, as the Logistic Regression model can't take in geometry values.

```{r}
accidents_thai_df <- st_drop_geometry(accidents_thai_sf_clean) %>%
  mutate(across(where(is.character), as.factor))

sapply(lapply(accidents_thai_df, unique), length)
```

```{r}
# Logistic Regression
glm.def1 <- glm(fatal_accident~.-province_en, data=accidents_thai_df, family=binomial)
summary(glm.def1)
```

From the model above, we can see that the more statistically significant variables are accident_categories, vehicle_categories, and weather_condition. Let's try that again with just these 3 variables.

```{r}
# Logistic Regression with these 3 variables
glm.def2 <- glm(fatal_accident~accident_categories + vehicle_categories + weather_condition, data=accidents_thai_df, family=binomial)
summary(glm.def2)
```

Most of them are statistically significant at the 0.05 level of significance and above.

### 4.2.2 Fatality breakdown of accidents by variables

#### 4.2.2.1 Weather

```{r}
abs_plot <- ggplot(accidents_thai_sf_clean, aes(x = weather_condition, fill = fatal_accident)) + 
    geom_bar() +
    labs(title = "Number of Fatal Accidents caused by Weather Condition",
       x = "Bad Weather Condition?",
       y = "Number of Accidents") +
    theme_bw()

prop_plot <- accidents_thai_sf_clean %>%
  count(weather_condition, fatal_accident) %>%       
  group_by(weather_condition) %>%
  mutate(pct= prop.table(n) * 100) %>%
  ggplot() + aes(weather_condition, pct, fill=fatal_accident) +
  geom_bar(stat="identity") +
  geom_text(aes(label=paste0(sprintf("%1.1f", pct),"%")),
            position=position_stack(vjust=0.5)) +
  labs(title = "Proportion of Fatal Accidents caused by Weather Condition",
       x = "Bad Weather Condition?",
       y = "Proportion of Accidents") +
  theme_bw()

grid.arrange(abs_plot, prop_plot, nrow=2)
```

From this, we can infer that weather conditions in fact is not a direct cause to fatal accident, as proportion of fatal accidents when the weather condition is clear is higher than that of when it is not.

#### 4.2.2.2 Vehicle Categories

What about vehicle categories?

```{r}
abs_plot2 <- ggplot(accidents_thai_sf_clean, aes(x = vehicle_categories, fill = fatal_accident)) + 
    geom_bar() +
    labs(title = "Number of Fatal Accidents by Vehicle Categories",
       x = "Vehicle Categories",
       y = "Number of Accidents") +
    theme_bw()

prop_plot2 <- accidents_thai_sf_clean %>%
  count(vehicle_categories, fatal_accident) %>%       
  group_by(vehicle_categories) %>%
  mutate(pct= prop.table(n) * 100) %>%
  ggplot() + aes(vehicle_categories, pct, fill=fatal_accident) +
  geom_bar(stat="identity") +
  geom_text(aes(label=paste0(sprintf("%1.1f", pct),"%")),
            position=position_stack(vjust=0.5)) +
  labs(title = "Proportion of Fatal Accidents by Vehicle Categories",
       x = "Vehicle Cateogries",
       y = "Proportion of Accidents") +
  theme_bw()

grid.arrange(abs_plot2, prop_plot2, nrow=2)
```

Most accidents are caused by heavy_duty vehicles, but the almost 1/3 of all accidents involving two-wheeled vehicles ends up in fatality!

#### 4.2.2.3 Accident Cause Categories

Does the cause of accident influence the outcome of it?

```{r}
abs_plot3 <- ggplot(accidents_thai_sf_clean, aes(x = accident_categories, fill = fatal_accident)) + 
    geom_bar() +
    labs(title = "Number of Fatal Accidents by Accident Categories",
       x = "Accident Categories",
       y = "Number of Accidents") +
    theme_bw()

prop_plot3 <- accidents_thai_sf_clean %>%
  count(accident_categories, fatal_accident) %>%       
  group_by(accident_categories) %>%
  mutate(pct= prop.table(n) * 100) %>%
  ggplot() + aes(accident_categories, pct, fill=fatal_accident) +
  geom_bar(stat="identity") +
  geom_text(aes(label=paste0(sprintf("%1.1f", pct),"%")),
            position=position_stack(vjust=0.5)) +
  labs(title = "Proportion of Fatal Accidents by Accident Categories",
       x = "Accident Cateogries",
       y = "Proportion of Accidents") +
  theme_bw()

grid.arrange(abs_plot3, prop_plot3, nrow=2)
```

Unsurprisingly, Traffic Violations and Driver Factors have a higher proportion of fatality, though speeding, the leading cause of accidents, have the highest absolute number of fatal accidents.

More in-depth analysis with a combination of the above?

## 4.3 Distribution of accidents across Thailand

### 4.3.1 Top 10 Province in highest number of accidents recorded

Having looked at the cause and effect, let us take a closer look at how it differs when we zoom in to specific provinces. We will first look at the top 10 province that has the highest number of accidents.

```{r}
accidents_top10 <- accidents_thai_sf_clean %>%
  group_by(province_en) %>%
  summarise(total_count=n()) %>%
  top_n(10, total_count) %>%
  .$province_en

accidents_top10

ggplot(accidents_thai_sf_clean[accidents_thai_sf_clean$province_en %in% accidents_top10,], 
       aes(x=province_en)) + geom_bar() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  labs(title = "Top 10 Provinces with most recorded accidents",
       x = "Provinces",
       y = "Number of Accidents")
```

Being the leading province with the highest population density, it make sense that Bangkok has the highest number of accidents.

### 4.3.2 Bangkok Comparison

Let's filter our data to only show records in Bangkok

```{r}
accidents_bkk_sf_clean <- accidents_thai_sf_clean[accidents_thai_sf_clean$province_en == "Bangkok",]
```

#### 4.3.2.1 Leading cause of accident

```{r}
ggplot(accidents_bkk_sf_clean, 
       aes(x=accident_categories)) + geom_bar() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  labs(title = "Cause for accidents in Bangkok",
       x = "Causes",
       y = "Number of Accidents")
```

Speeding is the leading cause of accidents in Bangkok too.

```{r}
accidents_bkk_sf_clean
```

#### 4.3.2.2 Accident fatality rate

```{r}
ggplot(accidents_bkk_sf_clean, aes(x = fatal_accident)) +
  geom_bar() +
  labs(title = "Fatal Accident?",
       x = "Number of Fatalities",
       y = "Number of Accidents")
```

Fatality rate of accidents in Bangkok is overwhelmingly low for some reason. Worth taking a look into?

### 4.3.3 Which province has highest fatality rate?

TBC

## 4.4 Is there a relationship between festive periods and accident rate?

# **-. Extras**

There are points with unknown province well within the boundary of Thailand.

```{r}
unknown <- accidents_thai_sf_clean %>% filter(province_en == "unknown")
unknown
```

By extracting them out we can see that there are 17 points

```{r}
tmap_mode("plot")
tm_shape(unknown) +
  tm_dots("province_en")
```

Loading the provinces

```{r}
thai_provinces <- st_read(dsn = "data/thai_adm_boundary", 
                 layer = "tha_admbnda_adm1_rtsd_20220121") %>%
  st_transform(crs = 4239) %>%
  dplyr::select("ADM1_EN")

glimpse(thai_provinces)
```

Merging the provinces to the unknown points, we can actually assign their correct province to them, though not sure if the provinces here are standardized to the one provided in the thailand accidents dataset.

```{r}
glimpse(st_intersection(unknown, thai_provinces))
```
